{"version":3,"file":"bundle.js","sources":["../lib/hardware/HardwareManager.js","../lib/hardware/Device.js","../lib/utils.js","../lib/hardware/Motor.js","../lib/hardware/Servo.js","../lib/hardware/DigitalOutput.js","../lib/hardware/DigitalInput.js","../lib/drive/TwoWheelDrive.js","../lib/drive/ArcadeDrive.js","../lib/drive/TankDrive.js","../lib/controls/Control.js","../lib/controls/Button.js","../lib/controls/ControlManager.js","../lib/controls/Joystick.js","../lib/controls/Slider.js","../lib/connection/Connection.js","../lib/connection/AjaxConnection.js","../lib/connection/WebSocketConnection.js","../lib/index.js"],"sourcesContent":["// state variables //\nconst _devices = { }\nlet _config = null\n\n/**\n * Manages the virtual hardware layer, allowing uses to send commands to\n * the robot or receive sensor values from the robot by manipulating hardware\n * interface objects.\n *\n * The class is part of the core framework infrastructure and should not be\n * needed in your code under most circumstances.\n *\n * @protected\n */\nexport default class HardwareManager {\n  /**\n   * Set the hardware config. This is stored as 'hardware.json' on the\n   * robot file-system.\n   *\n   * @protected\n   * @param {object} value - the hardware.json object\n   */\n  static set config (value) {\n    _config = value\n  }\n\n  /**\n   * Validate the hardware configuration. Returns an array of any errors.\n   * This method makes sure the robot only defines logical devices that are\n   * configured in the hardware.\n   *\n   * @protected\n   * @return {array} - any errors in configuration, or null if no errors\n   */\n  static validateConfig () {\n    // error collection //\n    const errors = [ ]\n    const addError = (message) => errors.push({ type: 'HARDWARE', message })\n\n    // configuration must be set //\n    if (!_config) {\n      addError('Hardware configuration not set')\n    } else if (!_config.devices) {\n      addError('Hardware configuration is missing devices')\n    }\n    if (errors.length) return errors\n\n    // validate all logical devices are configured //\n    for (const deviceName in HardwareManager.devices) {\n      const device = HardwareManager.devices[deviceName]\n      const config = HardwareManager.config.devices[deviceName]\n      if (config) {\n        // make sure the driver is known //\n        const driverName = config.driver\n        if (!device.supportsDriver(driverName)) {\n          errors.push(`Device ${deviceName} has invalid driver: ${driverName}`)\n        }\n      } else {\n        // logical device name has no configuration onboard robot //\n        addError(`Device has no configuration: ${deviceName}`)\n      }\n    }\n\n    return (errors.length) ? errors : null\n  }\n\n  /**\n   * Get the outputs of all hardware devices by device name. This\n   * method is called by the framework to build the data packet to\n   * be sent to the robot.\n   *\n   * @protected\n   * @return {Map<string,number>} - values for all output devices by device name\n   */\n  static getOutputs () {\n    const packet = { }\n    // get device outputs //\n    for (const deviceName in _devices) {\n      const device = _devices[deviceName]\n      if (device.getOutput) {\n        packet[deviceName] = device.getOutput()\n      }\n    }\n    return packet\n  }\n\n  /**\n   * Set the values of named input devices. This method is called\n   * by the framework with raw values received from the robot.\n   *\n   * @protected\n   * @param {object} values - values of all input devices\n   */\n  static setInputs (values) {\n    // write inputs to devices //\n    for (const deviceName in values) {\n      const device = _devices[deviceName]\n      if (device && device.setInput) {\n        device.setInput(values[deviceName])\n      }\n    }\n  }\n\n  /**\n   * Called by the Device class constructor to register a device\n   * with the HardwareManager.\n   *\n   * @private\n   * @param {string} device - device name\n   * @throws {Error} device with that name already exists\n   */\n  static registerDevice (device) {\n    const name = device.name\n    if (_devices[name]) {\n      throw new Error(`Device already exists: ${name}`)\n    }\n    _devices[name] = device\n  }\n}\n","import HardwareManager from './HardwareManager'\n\n/**\n * Abstract base class for virtual devices.\n *\n * Extend this class to implement your own virtual devices.\n * In most code, this will not be needed.\n */\nexport default class Device {\n  /**\n   * Constructor\n   * @param {string} name - name of the device\n   */\n  constructor (name) {\n    /**\n     * @type {string}\n     */\n    this.name = name\n    /**\n     * @private\n     * @type {number}\n     */\n    this.value = 0\n    HardwareManager.registerDevice(this)\n  }\n\n  /**\n   *  Sets the value of this Device. Only used for output Devices.\n   *  Calling this on input devices does nothing.\n   *\n   *  @param {number} value - the value to set.\n   */\n  set (value) {\n    this.value = value\n  }\n\n  /**\n   * Get the value of the device.\n   *\n   * For output devices, this reads back the last call to 'set()', for\n   * input devices, it returns the last value read from the controller.\n   *\n   * @return {number} current value of the device\n   */\n  get () {\n    return this.value\n  }\n\n  /**\n   * Gets the processed value of this Device in a form suitable\n   * for sending to the robot firmware. This will generally not be as\n   * a floating point number like in the framework.\n   *\n   * @abstract\n   * @protected\n   * @return {string} the translated value of the Device\n   */\n  getOutput () {\n    return null\n  }\n\n  /**\n   * Tests whether a device supports the specified driver.\n   *\n   * @protected\n   * @param {string} driverName - name of the proposed driver for this device\n   * @return {boolean} true if the Device supports this driver\n   */\n  supportsDriver (driverName) {\n    return false\n  }\n}\n","/**\n * Utility functions\n *\n * @module utils\n */\n/* globals XMLHttpRequest */\n\n/**\n * Constrain input to a given range.\n *\n * Identical to the Arduino library function with the same name.\n * @see https://www.arduino.cc/en/Reference/Constrain\n *\n * @param {number} value - input value\n * @param {number} min - minimum value\n * @param {number} max - maximum value\n * @return {number}\n */\nexport function constrain (value, min, max) {\n  if (value < min) return min\n  if (value > max) return max\n  return value\n}\n\n/**\n * Map a value from an input range to an output range.\n *\n * Identical to the Arduino library function with the same name.\n * @see https://www.arduino.cc/en/Reference/Map\n *\n * @param {number} value input value\n * @param {number} inputMin input range low value\n * @param {number} inputMax input range high value\n * @param {number} outputMin output range low value\n * @param {number} outputMax output range high value\n * @return {number}\n */\nexport function map (value, inputMin, inputMax, outputMin, outputMax) {\n  return (value - inputMin) * (outputMax - outputMin) / (inputMax - inputMin) + outputMin\n}\n\n/**\n * General AJAX call.\n * @private\n *\n * @param {string} method HTTP method\n * @param {string} url url to call\n * @param {?string|Object} data data to send, will be stringified to JSON if object\n * @param {?number} timeout timeout in milliseconds\n * @param {Function} callback (err, data)\n */\nexport function ajax (method, url, data, timeout, callback) {\n  if (typeof timeout === 'function') {\n    callback = timeout\n    timeout = undefined\n  }\n\n  // get the response //\n  const getResponse = (xhr, data) => ({\n    status: xhr.status,\n    statusText: xhr.statusText,\n    data,\n    xhr\n  })\n\n  // create request //\n  const xhr = new XMLHttpRequest()\n  xhr.open(method, url, true)\n  xhr.timeout = timeout\n  xhr.addEventListener('load', () => {\n    if (xhr.status >= 200 && xhr.status < 300) {\n      callback(null, getResponse(xhr, xhr.responseText))\n    } else {\n      callback(new Error(`${xhr.status} - ${xhr.statusText}`), getResponse(xhr))\n    }\n  })\n  xhr.addEventListener('error', (e) => callback(new Error('Request failed'), getResponse(xhr)))\n  xhr.addEventListener('timeout', () => callback(new Error('Request timeout'), getResponse(xhr)))\n\n  if (data) {\n    xhr.send(typeof data !== 'string' ? JSON.stringify(data) : data)\n  } else {\n    xhr.send()\n  }\n}\n\n/**\n * XHR wrapper to simplify AJAX GET calls.\n * @private\n *\n * @param {string} url url to call\n * @param {?number} timeoutMs connection timeout in milliseconds\n * @param {Function} callback - (err, data)\n */\nexport function ajaxGet (url, timeoutMs, callback) {\n  return ajax('GET', url, null, timeoutMs, callback)\n}\n\n/**\n * XHR wrapper to simplify AJAX PUT calls.\n * @private\n *\n * @param {string} url url to call\n * @param {?string|Object} data data to send, will be stringified to JSON if object\n * @param {?number} timeout timeout in milliseconds\n * @param {Function} callback (err, data)\n */\nexport function ajaxPut (url, data, timeout, callback) {\n  return ajax('PUT', url, data, timeout, callback)\n}\n","import Device from './Device'\nimport { constrain } from '../utils'\n\n/**\n * Controls a motor, which is presumed to support both forward\n * reverse movement with values of -1.0 to 1.0.\n */\nexport default class Motor extends Device {\n  /**\n   * Constructor\n   *\n   * @param {string} name - name of the motor\n   */\n  constructor (name) {\n    super(name)\n    /**\n     * Is the motor direction reversed.\n     *\n     * Defaults to `false`.\n     * @type {boolean}\n     */\n    this.reversed = false\n    this.set(0)\n  }\n\n  /**\n   * Set the value of the motor. This is constrained betweem -1.0 (full reverse)\n   * and 1.0 (full forward). A value of 0 is stopped.\n   *\n   * @param {number} [value=0] - the motor power value [-1.0, 1.0]\n   */\n  set (value = 0) {\n    super.set(constrain(this.reversed ? -value : value, -1.0, 1.0))\n  }\n\n  /**\n   * Returns the motor output. This will be an integer between -1023 and\n   * 1023, converted to a string.\n   *\n   * @override\n   * @protected\n   * @return {string} the motor value [-1023, 1023]\n   */\n  getOutput () {\n    return Math.round(this.get() * 1023).toString()\n  }\n\n  /**\n   * Does the Motor support a specified driver.\n   *\n   * Motors currently support the following drivers for motor-like devices:\n   *\n   *  - PWM_HBRIDGE : reversible power driver (speed and direction outputs)\n   *  - PWM : brushless ESC\n   *  - PWM : single direction power driver\n   *  - PWM : continuous rotation servo\n   *\n   * @private\n   * @param {string} driverName - name of the proposed driver\n   * @return {boolean} true if the Motor supports the specified driver.\n   **/\n  supportsDriver (driverName) {\n    return [ 'PWM_HBRIDGE', 'PWM' ].indexOf(driverName) !== -1\n  }\n}\n","import Device from './Device'\nimport { map } from '../utils'\n\n/**\n * Controls a servo via a PWM output. Input values are 0.0 to 1.0,\n * representing the minimum and maximum rotational positions.\n */\nexport default class Servo extends Device {\n  /**\n   * Constructor.\n   *\n   * @param {string} name - name of the Servo\n   */\n  constructor (name) {\n    super(name)\n    /**\n     * The minimum value of the servo output, on a normalized scale of [0, 1.0].\n     *\n     * To limit the Servo minimum position to a value of 25% of full scale, set\n     * minOutput to 0.25.\n     *\n     * @type {number}\n     */\n    this.minOutput = 0.0\n    /**\n     * The maximum value of the servo output, on a normalized scale of [0, 1.0].\n     *\n     * To limit the Servo maximum position to a value of 75% of full scale, set\n     * minOutput to 0.75.\n     *\n     * @type {number}\n     */\n    this.maxOutput = 1.0\n    /**\n     * Should the servo direction be swapped.\n     *\n     * If true, an input of 0 will correspond to 100% full scale, while an input of\n     * 1.0 will correspond to 0% of full scale.\n     *\n     * @type {boolean}\n     */\n    this.reversed = false\n    this.set(0.5)\n  }\n\n  /**\n   * Set the value of the Servo on the configured scale between minOutput and\n   * maxOutput. Value of 0 corresponds to minOutput and 1.0 corresponds to maxOutput.\n   * If `reversed` is set, the values with be swapped.\n   *\n   * @param {number} [value=0] - the servo position [0, 1.0]\n   */\n  set (value = 0) {\n    if (this.reversed) {\n      super.set(map(value, 0.0, 1.0, this.minOutput, this.maxOutput))\n    } else {\n      super.set(map(value, 0.0, 1.0, this.maxOutput, this.minOutput))\n    }\n  }\n\n  /**\n   * Returns the Servo output. This will be an integer between 0 and 1023,\n   * converted to a string.\n   *\n   * @override\n   * @protected\n   * @return {string} the motor value [0, 1023]\n   */\n  getOutput () {\n    return Math.round(this.get() * 1023).toString()\n  }\n\n  /**\n   * Does the Servo support a specified driver.\n   *\n   * Servos currently support the following drivers:\n   *\n   *  - PWM : standard driver\n   *\n   * @private\n   * @param {string} driverName - name of the proposed driver\n   * @return {boolean} true if the Servo supports the specified driver.\n   **/\n  supportsDriver (driverName) {\n    return [ 'PWM' ].indexOf(driverName) !== -1\n  }\n}\n","import Device from './Device'\n\n/**\n * Digital Output\n *\n * A digital output device that turns a device connected to\n * a pin, such as an LED, on and off.\n */\nexport default class DigitalOutput extends Device {\n  /**\n   * Constructor\n   *\n   * @param {string} name - name of the digital output\n   */\n  constructor (name) {\n    super(name)\n    /**\n     * Is the output pin inverted.\n     *\n     * Defaults to `false`.\n     * @type {boolean}\n     */\n    this.inverted = false\n    this.set(false)\n  }\n\n  /**\n   * Set the value of the output. Any 'falsy' value (false, 0, null, etc.)\n   * will translate to an output of LOW. Any other value will translate to\n   * an output of HIGH.\n   *\n   * @param {number} [value=0] - the digital output value\n   */\n  set (value) {\n    super.set(!!value ^ this.reversed ? 1 : 0)\n  }\n\n  /**\n   * Returns the output. This will be either the string '1' or '0'.\n   *\n   * @override\n   * @protected\n   * @return {string} the output value\n   */\n  getOutput () {\n    return this.get().toString()\n  }\n\n  /**\n   * Does the output support a specified driver.\n   *\n   * Digital outputs currently support the following drivers:\n   *\n   *  - DIGITAL_OUT : an output pin\n   *\n   * @private\n   * @param {string} driverName - name of the proposed driver\n   * @return {boolean} true if the DigitalOutput supports the specified driver.\n   */\n  supportsDriver (driverName) {\n    return [ 'DIGITAL_OUT' ].indexOf(driverName) !== -1\n  }\n}\n","import Device from './Device'\n\n/**\n * Digital Input\n *\n * A digital input device, such as an input pin. This can be connected\n * to a switch, bump sensor, line follower or other digital device.\n */\nexport default class DigitalInput extends Device {\n  /**\n   * Constructor\n   *\n   * @param {string} name - name of the digital input\n   */\n  constructor (name) {\n    super(name)\n    /**\n     * The value of the input.\n     * @private\n     * @type {boolean}\n     */\n    this.value = false\n  }\n\n  /**\n   * Get the value of the input as a boolean (true or false).\n   *\n   * @return {boolean} the value of the input\n   */\n  get () {\n    return this.value\n  }\n\n  /**\n   * Called by the framework to set the value of this input after\n   * it is received from the robot.\n   *\n   * @override\n   * @protected\n   * @param {number} value - the value to set\n   */\n  setInput (value) {\n    this.value = !!value\n  }\n\n  /**\n   * Does the input support a specified driver.\n   *\n   * Digital inputs currently support the following drivers:\n   *\n   *  - DIGITAL_IN : an input pin\n   *\n   * @private\n   * @param {string} driverName - name of the proposed driver\n   * @return {boolean} true if the DigitalInput supports the specified driver.\n   */\n  supportsDriver (driverName) {\n    return [ 'DIGITAL_IN' ].indexOf(driverName) !== -1\n  }\n}\n","import { constrain } from '../utils'\nimport { Motor } from '../hardware'\n\n/**\n * Base class for a two wheel robot.\n *\n * Motors named 'leftMotor' and 'rightMotor' are automatically created if no\n * motors are specified. These devices must be configured in the hardware setup.\n */\nexport default class TwoWheelDrive {\n  /**\n   * Constructor.\n   *\n   * @param {string|Motor} [leftMotor = 'leftMotor'] the left motor or device name\n   * @param {string|Motor} [rightMotor = 'rightMotor'] the right motor or device name\n   */\n  constructor (leftMotor, rightMotor) {\n    const getMotor = (motor) =>\n      typeof motor === 'string' ? new Motor(motor) : motor\n    /**\n     * @private\n     * @type {Array<Motor>}\n     */\n    this.motors = [\n      getMotor(leftMotor) || new Motor('leftMotor'),\n      getMotor(rightMotor) || new Motor('rightMotor')\n    ]\n    /**\n     * Swap the left and right motors.\n     * @type {boolean}\n     */\n    this.swapMotors = false\n  }\n\n  /**\n   * Get the logical left motor, i.e. after swapMotors is applied.\n   * @type {Motor}\n   */\n  get leftMotor () {\n    return this.motors[this.swapMotors ? 1 : 0]\n  }\n  /**\n   * Get the logical left motor, i.e. after swapMotors is applied.\n   * @type {Motor}\n   */\n  get rightMotor () {\n    return this.motors[this.swapMotors ? 0 : 1]\n  }\n\n  /**\n   * Set the left and right motor powers. Values are constrained\n   * to between -1.0 (full reverse) and 1.0 (full forward). A value of 0\n   * is stopped. See {@link Motor#set}\n   *\n   * @param {number} left - the left motor power\n   * @param {number} right - the right motor power\n   */\n  setMotorPowers (left, right) {\n    this.leftMotor.set(constrain(left || 0, -1.0, 1.0))\n    this.rightMotor.set(constrain(right || 0, -1.0, 1.0))\n  }\n\n  /**\n   * Stop both motors, this is equivalent to calling:\n   * ```javascript\n   * myMotor.setMotorPowers(0, 0);\n   * ```\n   */\n  stop () {\n    this.leftMotor.set(0)\n    this.rightMotor.set(0)\n  }\n}\n","import TwoWheelDrive from './TwoWheelDrive'\nimport { constrain } from '../utils'\n\n/**\n *  'Arcade' drive with separate control of speed and rotation. This class\n *  uses the classic FIRST Robotics control mixing scheme.\n *\n *  This style is easier to learn for novice drivers, but can offer less nuanced\n *  control, especially when attempting to make radiused turns.\n */\nexport default class ArcadeDrive extends TwoWheelDrive {\n  /**\n   * Set speed and rotation.\n   * FIXME: put notes about directionality\n   *\n   * @param {number} speed forward/reverse speed [-1.0, 1.0]\n   * @param {number} rotation left/right turning speed [-1.0, 1.0]\n   */\n  setSpeedAndRotation (speed, rotation) {\n    // clamp the inputs //\n    speed = constrain(speed, -1.0, 1.0)\n    if (this.speedScalar) {\n      speed = this.speedScalar.scale(speed)\n    }\n    rotation = constrain(rotation, -1.0, 1.0)\n    if (this.rotationScalar) {\n      rotation = this.rotationScalar.scale(rotation)\n    }\n\n    // mix speed and rotation signals //\n    let leftPower, rightPower\n    if (speed > 0.0) {\n      if (rotation > 0.0) {\n        leftPower = speed - rotation\n        rightPower = Math.max(speed, rotation)\n      } else {\n        leftPower = Math.max(speed, -rotation)\n        rightPower = speed + rotation\n      }\n    } else {\n      if (rotation > 0.0) {\n        leftPower = -Math.max(-speed, rotation)\n        rightPower = speed + rotation\n      } else {\n        leftPower = speed - rotation\n        rightPower = -Math.max(-speed, -rotation)\n      }\n    }\n\n    this.setMotorPowers(leftPower, rightPower)\n  }\n}\n","import TwoWheelDrive from './TwoWheelDrive'\n\n/**\n *  Differential 'tank' style drive where left and right wheels\n *  are controlled independently.\n *\n *  This style is harder to learn, but can offer superior control,\n *  since it is easier to steer in curves without slowing down.\n */\nexport default class TankDrive extends TwoWheelDrive {\n  /**\n   *  Set left and right wheel speeds independently.\n   *\n   *  @param {number} left wheel speed [-1.0, 1.0]\n   *  @param {number} right wheel speed [-1.0, 1.0]\n   */\n  setLeftAndRightSpeed (left, right) {\n    this.setMotorPowers(left, right)\n  }\n}\n","import ControlManager from './ControlManager'\n\n// internal state //\nlet _controlCount = 0\n\n/**\n * An object representing the position of the a {@link Control} on the\n * canvas.\n *\n * @typedef {Object} Position\n * @property {!(number|string)} x - the x position\n * @property {!(number|string)} y - the y position\n */\n\n/**\n * Abstract base class for all UI controls.\n *\n * Extend this class to implement your own UI controls. In most code, this\n * will not be needed.\n *\n * @abstract\n */\nexport default class Control {\n  /**\n   * Constructor.\n   *\n   * Create a control with the specified name. If no name is supplied, a\n   * name will be generated of the form `control####`, where `####` is a\n   * sequential integer.\n   *\n   * Note that control names must be unique. If a control by the same name\n   * already exists, an initialization exception will be thrown.\n   *\n   * @protected\n   * @param {string} name - the control name\n   * @throws {Error} control already exists with specified name\n   */\n  constructor (name) {\n    /**\n     * The control name\n     * @type {string}\n     */\n    this.name = name || `control${++_controlCount}`\n    /**\n     * The currently tracked {@link TouchEvent}, or null if no event is being\n     * tracked by this control.\n     *\n     * @protected\n     * @type {TouchEvent}\n     */\n    this.touch = null\n    /** @private */\n    this.pixelCache = null\n    ControlManager.registerControl(this)\n  }\n\n  /**\n   * Determine if the Control matches the specified {@link TouchEvent}.\n   *\n   * This method will generally contain computation geometry code that\n   * compares the input TouchEvent coordinates to the bounds of the {@link Control}.\n   *\n   * @abstract\n   * @protected\n   * @param {!TouchEvent} touch - the TouchEvent to test\n   * @return {boolean} - true if the control matches the event\n   */\n  matchesTouch (touch) {\n    return false\n  }\n\n  /**\n   * Called by the {@link ControlManager} when the control is tracking a TouchEvent.\n   * A Control begins tracking by returning true from {@link Control#matchesTouch}).\n   *\n   * Should be overridden by subclasses to update any internal state or outputs\n   * that are dependent on the latest touch.\n   *\n   * Will be passed `null` to indicate that the tracked TouchEvent has ended.\n   *\n   * @protected\n   * @param {?TouchEvent} touch - the TouchEvent to test\n   */\n  setTouch (touch) {\n    this.touch = touch\n  }\n\n  /**\n   * Returns a map of all important coordinates used by this control. The values\n   * are in the raw, polymorphic form, see {@link ControlManager.convertToPixels}\n   *\n   * This allows the base class to manage the conversion to pixels and cache the\n   * complete result for performance / frame rate reasons.\n   *\n   * @abstract\n   * @protected\n   * @return {Map<string,number|string>} named dimension collection, in raw form\n   */\n  getDimensions () {\n    return { }\n  }\n\n  /**\n   * Get the control dimensions converted to pixels relative\n   * to the current canvas size. This cached for performance reasons.\n   *\n   * @protected\n   * @returns {Map<string,number>} named dimension collection, in pixels\n   */\n  getPixelDimensions () {\n    if (this.pixelCache) return this.pixelCache\n    const dimensions = this.getDimensions()\n    const pixels = {}\n    for (const dimName in dimensions) {\n      pixels[dimName] = ControlManager.convertToPixels(dimName, dimensions[dimName])\n    }\n    return (this.pixelCache = pixels)\n  }\n\n  /**\n   * Draw the Control on the canvas.\n   *\n   * @abstract\n   * @protected\n   * @param {!CanvasRenderingContext2D} ctx - the 2D drawing context\n   */\n  draw (ctx) {\n\n  }\n}\n","import ControlManager from './ControlManager'\nimport Control from './Control'\n\n/**\n * Button for on-off control or selecting amongs discrete choices.\n *\n * This class can operate in multiple modes.\n *\n * ## Momentary mode ##\n * In this mode, the button will only register as pressed if it is actively\n * being touched. Once the touch ends, the button is no longer pressed. Physically,\n * this corresponds to spring loaded button. This is the default mode.\n *\n * ```javascript\n * // not actually needed, this is the default mode\n * myButton.sticky = false;\n * ```\n *\n * ## Toggle mode ##\n * In this mode, the button will flip between being pressed and unpressed every\n * time it is touched and released. Physically, this corresponds to a click-on, click-off\n * button.\n *\n * To set this mode, set sticky to `true`.\n * ```javascript\n * myButton.sticky = true;\n * ```\n *\n * ## Group (radio button) mode ##\n * In this mode, buttons are placed into a mutually-exclusive group where only one can\n * be pressed at a time. Physicially, this corresponds to spring-loaded buttons on\n * antique devices such as radios and tape decks.\n *\n * Using this mode requires that the set of buttons be placed in a group. This is done\n * by assigning the same `groupName` property to multiple buttons. Buttons in a group\n * are automatically sticky, so the `sticky` property is ignored.\n * ```javascript\n * myButton1 = new Button('button1');\n * myButton1.groupName = 'myButtons';\n * myButton2 = new Button('button2');\n * myButton2.groupName = 'myButtons';\n * ```\n * By default, the first button that is assigned to a group starts as the initial\n * selected Button. In the example above, this would be `myButton1`. You can change\n * this behavior by manually setting the initial Button to pressed. To make `myButton2`\n * start pressed, do the follow:\n * ```javascript\n * myButton2.pressed = true;\n * ```\n */\nexport default class Button extends Control {\n  /**\n   * Constructor. Create a Button and add it to the canvas.\n   * @override\n   * @param {!string} name - the joystick name\n   * @throws {Error} control already exists with specified name\n   */\n  constructor (name) {\n    super(name)\n    /**\n     * The placement of the Button on the canvas. For dimension values,\n     * see {@link ControlManager.convertToPixels}.\n     *\n     * @example <caption>Set individually</caption>\n     * myButton.position.x = 10;\n     * myButton.position.y = 20;\n     *\n     * @example <caption>Set as an Object literal</caption>\n     * myButton.position = { x: 10, y: 20 };\n     *\n     * @type {Position}\n     */\n    this.position = { x: 0, y: 0 }\n    /**\n     * The radius of the Button. Bigger buttons are easier to push, but\n     * the take up more space. In other news, the sky is blue.\n     *\n     * @example\n     * myJoystick.radius = 10;\n     *\n     * @type {number}\n     */\n    this.radius = 10\n    /**\n     * Should the button stay pressed until touched again to turn off. This value\n     * is ignored if the button is part of a group.\n     *\n     * Defaults to `false`.\n     *\n     * @type {boolean}\n     */\n    this.sticky = false\n    /**\n     * Set this property to the same value on multiple Buttons to make them part of\n     * a group. Buttons in a group are mutually exclusive, only one can be pressed\n     * at a time.\n     * @type {?string}\n     */\n    this.groupName = null\n    /**\n     * Style to draw.\n     * @type {string}\n     */\n    this.style = 'white'\n    /**\n     * *Output* - True if the Button is pressed.\n     * @type {boolean}\n     */\n    this.pressed = false\n  }\n\n  /**\n   * Get Button dimensions.\n   *\n   * @protected\n   * @return {Map<string,number|string>} named dimension collection, in raw form\n   * @property {!(number|string)} x - the x coordinate\n   * @property {!(number|string)} y - the y coordinate\n   * @property {!(number|string)} r - the radius\n   */\n  getDimensions () {\n    return { x: this.position.x, y: this.position.y, r: this.radius }\n  }\n\n  /**\n   * Is the specified touch inside the Button.\n   *\n   * This method is called by the framework, so need not be used directly.\n   *\n   * @override\n   * @protected\n   * @param {!TouchEvent} touch - the TouchEvent to test\n   * @return {boolean} - true if the control matches the event\n   */\n  matchesTouch (touch) {\n    const { clientX, clientY } = touch\n    const { x, y, r } = this.getPixelDimensions()\n\n    const dx = (x - clientX)\n    const dy = (y - clientY)\n    return Math.sqrt(dx * dx + dy * dy) <= r\n  }\n\n  /**\n   * A touch tracked by the Button has been updated. Buttons only respond\n   * to first instance of a TouchEvent (start) and the call where the TouchEvent\n   * is cleared to null (end). The exact behavior depends on the setting of\n   * {@link Button#sticky} and {@link Button#groupName}.\n   *\n   * This method is called by the framework, so need not be used directly.\n   *\n   * @override\n   * @protected\n   * @param {?TouchEvent} touch - the TouchEvent to test\n   */\n  setTouch (touch) {\n    const lastState = !!this.touch\n    console.log(this.sticky, this.touch, lastState, touch, this.pressed)\n    super.setTouch(touch)\n    if (this.sticky || this.groupName) {\n      // only react to touchStart //\n      if (touch && !lastState) {\n        // are we part of a group //\n        if (this.groupName) {\n          // only react to changed values //\n          if (!this.pressed) {\n            // clear all others in group //\n            for (const controlName in ControlManager.controls) {\n              const control = ControlManager.controls[controlName]\n              if (control instanceof Button && control.groupName === this.groupName) {\n                control.pressed = false\n              }\n            }\n            this.pressed = true\n          }\n        } else {\n          // just toggle this button //\n          this.pressed = !!(this.pressed ^ true)\n        }\n      }\n    } else {\n      this.pressed = !!touch\n    }\n  }\n\n  /**\n   * Draw the Button on the canvas.\n   *\n   * This method is called by the framework, so need not be used directly.\n   *\n   * @protected\n   * @param {!CanvasRenderingContext2D} ctx - the 2D drawing context\n   */\n  draw (ctx) {\n    const { x, y, r } = this.getPixelDimensions()\n\n    ctx.beginPath()\n    ctx.strokeStyle = this.style\n    ctx.fillStyle = this.style\n    ctx.lineWidth = 6\n    ctx.arc(x, y, r, 0, Math.PI * 2, true)\n    if (this.pressed) {\n      ctx.fill()\n    } else {\n      ctx.stroke()\n    }\n\n    ctx.beginPath()\n    ctx.fillStyle = 'white'\n    ctx.fillText(\n      `${this.name}, pressed: ${this.pressed}`,\n      x - 50, y + r + 15\n    )\n  }\n}\n","import Button from './Button'\n\n// constants //\nconst FRAME_RATE = 30\n\n// internal state //\nconst _touchOwners = { }\nconst _controls = { }\nlet _canvas = null\nlet _context = null\nlet _intervalID = null\nlet _oldWidth = 0\nlet _oldHeight = 0\n\n/**\n * Event wrapper to unify multi-touch and mouse events.\n * @protected\n *\n * @typedef {Object} TouchEvent\n * @property {!string} identifer unique identifier (from DOM for multi-touch, 'mouse' if from mouse)\n * @property {!number} clientX the X position in pixels, relative to canvas origin (top left)\n * @property {!number} clientY the Y position in pixles, relative to canvas origin (top left)\n * @property {number} [force] the force of the touch, null for mouse\n */\n\n/**\n * Transforms DOM touch (or mouse) event to pixel coordinates relative to\n * the canvas. This is needed because the coordinates are relative to the\n * screen. Need to subtract the canvas position to compensate.\n *\n * @param {Object} touch the DOM touch event\n * @return {TouchEvent}\n */\nfunction transformTouch (touch) {\n  return {\n    identifier: touch.identifier,\n    clientX: Math.round(touch.clientX - _canvas.offsetLeft),\n    clientY: Math.round(touch.clientY - _canvas.offsetTop),\n    force: touch.force\n  }\n}\n\n/**\n * Attempt to process a new touch event. Queries all controls for\n * for first one that responds true to @link Control#matchesTouch.\n *\n * The first match captures the touch and will receive all updates\n * through the @link Control#setTouch call.\n *\n * @param {Object} touch the DOM touch event\n */\nfunction doAdd (touch) {\n  if (typeof touch.identifier === 'undefined') touch.identifier = 'mouse'\n  touch = transformTouch(touch)\n\n  // loop through controls and see if one captures the touch //\n  for (const controlName in ControlManager.controls) {\n    const control = ControlManager.controls[controlName]\n    if (control.matchesTouch(touch)) {\n      _touchOwners[touch.identifier] = control\n      control.setTouch(touch)\n      fireUpdate()\n      break\n    }\n  }\n}\n\n/**\n * If the specified touch has been captured, funnel it to the\n * @link Control#setTouch method of the owner control.\n *\n * @param {Object} touch the DOM touch event\n */\nfunction doUpdate (touch) {\n  if (typeof touch.identifier === 'undefined') touch.identifier = 'mouse'\n  const control = _touchOwners[touch.identifier]\n  if (!control) return\n  control.setTouch(transformTouch(touch))\n  fireUpdate()\n}\n\n/**\n * If the specified touch has been captured, signal the capturing control\n * that it has ended by passing null to @line Control#setTouch.\n *\n * @param {Object} touch the DOM touch event\n */\nfunction doRemove (touch) {\n  if (typeof touch.identifier === 'undefined') touch.identifier = 'mouse'\n  const control = _touchOwners[touch.identifier]\n  if (!control) return\n  control.setTouch(null)\n  delete _touchOwners[touch.identifier]\n  fireUpdate()\n}\n\n/**\n * Fire the update event, if one is defined.\n */\nfunction fireUpdate () {\n  const { onupdate } = ControlManager\n  if (typeof onupdate === 'function') {\n    onupdate()\n  }\n}\n\n/**\n * Loop through each {@link Control} and paint it to the canvas.\n */\nfunction drawControls () {\n  // check for canvas resize //\n  const resized = (_canvas.width !== _oldWidth || _canvas.height !== _oldHeight)\n  if (resized) {\n    _oldWidth = _canvas.width\n    _oldHeight = _canvas.height\n  }\n\n  _context.clearRect(0, 0, _canvas.width, _canvas.height)\n\n  // loop through controls //\n  for (const controlName in _controls) {\n    const control = _controls[controlName]\n    if (resized) control.pixelCache = null\n    control.draw(_context)\n  }\n}\n\n/**\n * Manages the display canvas, processing touch events and painting of\n * all user-created controls.\n *\n * The class is part of the core framework infrastructure and should not be\n * needed in your code under most circumstances.\n *\n * @protected\n */\nexport default class ControlManager {\n  /**\n   * All declared {@link Control} instances, keyed by control name.\n   *\n   * @type {Map<string,Control>}\n   */\n  static get controls () {\n    return _controls\n  }\n\n  /**\n   * Initialize the ControlManager with the specified HTML5 canvas object.\n   *\n   * This method will attach the relevant event listeners to monitor the canvas\n   * for touch and mouse events.\n   *\n   * @protected\n   * @param {!HTMLElement} canvas the canvas element\n   */\n  static setCanvas (canvas) {\n    /**\n     * Split all multi-touches in a touch event to discrete calls.\n     */\n    function handleTouches (e, handler) {\n      // prevent scrolling and mouse fallthrough on desktop //\n      e.preventDefault()\n      // loop through touches //\n      for (let i = 0; i < e.changedTouches.length; i++) {\n        handler(e.changedTouches[i])\n      }\n    }\n\n    canvas.addEventListener('touchstart', (e) => handleTouches(e, doAdd), false)\n    canvas.addEventListener('touchmove', (e) => handleTouches(e, doUpdate), false)\n    canvas.addEventListener('touchend', (e) => handleTouches(e, doRemove), false)\n\n    canvas.addEventListener('mousedown', doAdd, false)\n    canvas.addEventListener('mousemove', doUpdate, false)\n    canvas.addEventListener('mouseup', doRemove, false)\n\n    _canvas = canvas\n    _context = canvas.getContext('2d')\n  }\n\n  /**\n   * Start control process and canvas updates.\n   * @protected\n   */\n  static start () {\n    // handle default values of button groups //\n    const buttonGroups = { }\n    for (const controlName in _controls) {\n      const control = _controls[controlName]\n      if (control instanceof Button && control.groupName) {\n        const { groupName } = control\n        if (buttonGroups[groupName]) {\n          buttonGroups[groupName].push(control)\n        } else {\n          buttonGroups[groupName] = [ control ]\n        }\n      }\n    }\n    for (const groupName in buttonGroups) {\n      const buttons = buttonGroups[groupName]\n      // if user has not set a default pressed button, select first //\n      if (!buttons.some(button => button.pressed)) {\n        buttons[0].pressed = true\n      }\n    }\n\n    // start painting //\n    _intervalID = setInterval(() => drawControls(), 1000 / FRAME_RATE)\n  }\n\n  /**\n   * Stop control processing and canvas updates.\n   * @protected\n   */\n  static stop () {\n    if (_intervalID) {\n      clearInterval(_intervalID)\n      _intervalID = null\n    }\n  }\n\n  /**\n   * Converts a flexible dimension string pixels for use on the canvas.\n   *\n   * This method supports multiple different formats.\n   * @example\n   * control.dimension = 50     // 50% of the height or width, depending on context\n   * control.dimension = '50%'  // same as above\n   * control.dimension = '20px' // pixels specified directly, only good for one screen size\n   *\n   * @param {!string} dim - the name of the dimension ('x', 'height', etc.)\n   * @param {!(number|string)} value - raw dimension value, any format\n   * @return {number} result in pixels\n   */\n  static convertToPixels (dim, value) {\n    // determine the reference dimension based on name //\n    let reference\n    switch (dim) {\n      case 'y':\n      case 'height':\n        reference = _canvas.height\n        break\n      default:\n        reference = _canvas.width\n        break\n    }\n\n    // handle based on type //\n    switch (typeof value) {\n      case 'number':\n        // if a fraction, assume a percent //\n        if (value > 0 && value < 1.0) {\n          value *= 100\n        }\n        return Math.round(value * reference / 100)\n      case 'string':\n        const matches = value.match(/^([0-9]+)([^0-9]*)$/)\n        if (matches) {\n          const [ , num, unit ] = matches\n          value = parseInt(num)\n          switch (unit) {\n            case '%':\n            case '':\n              return Math.round(value * reference / 100)\n            case 'px':\n              return value\n          }\n        }\n        // fallthrough //\n      default:\n        return null\n    }\n  }\n\n  /**\n   * Add a new {@link Control} to the ControlManager. This method\n   * is called automatically by the {@link Control} constructor.\n   *\n   * @private\n   * @param {!Control} control - the control\n   * @throws {Error} control with that name already exists\n   */\n  static registerControl (control) {\n    const name = control.name\n    if (_controls[name]) {\n      throw new Error(`Control already exists: ${name}`)\n    }\n    _controls[name] = control\n  }\n}\n","import Control from './Control'\nimport { constrain } from '../utils'\n\n/**\n * Joystick for two dimensional X-Y control.\n *\n * This is the primary tool for controlling the robot. It functions just like a\n * physical joystick, giving readings in both the X and Y directions.\n *\n * @example <caption>Setting Joystick parametes in 'setup()'</caption>\n * var myJoystick = new Joystick('leftStick');\n * myJoystick.position.x = 40;\n * myJoystick.position.y = 50;\n * myJoystick.radius = 15;\n *\n * @example <caption>Reading Joystick value in 'loop()'</caption>\n * var valueX = myJoystick.x;\n * myMotor.set(valueX);\n */\nexport default class Joystick extends Control {\n  /**\n   * Constructor. Create a new Joystick and add it to the canvas.\n   *\n   * @override\n   * @param {!string} name - the joystick name\n   * @throws {Error} control already exists with specified name\n   */\n  constructor (name) {\n    super(name)\n    /**\n     * The placement of the Joystick on the canvas. For dimension values,\n     * see {@link ControlManager.convertToPixels}.\n     *\n     * @example <caption>Set individually</caption>\n     * myJoystick.position.x = 10;\n     * myJoystick.position.y = 20;\n     *\n     * @example <caption>Set as an Object literal</caption>\n     * myJoystick.position = { x: 10, y: 20 };\n     *\n     * @type {Position}\n     */\n    this.position = { x: 0, y: 0 }\n    /**\n     * The radius of the Joystick. Sets the overall size, and therefore\n     * sensitivity. Smaller joysticks are more sensitive.\n     *\n     * @example\n     * myJoystick.radius = 10;\n     *\n     * @type {number}\n     */\n    this.radius = 10\n    /**\n     * Should the Joystick reset to zero output when a TouchEvent ends, or\n     * continue with the last value. Think of this as \"spring return\" in a\n     * physical Joystick.\n     *\n     * Defaults to `false`.\n     *\n     * @example\n     * myJoystick.sticky = true;\n     *\n     * @type {boolean}\n     */\n    this.sticky = false\n    /**\n     * Style to draw.\n     * @type {string}\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle\n     */\n    this.style = 'white'\n\n    /**\n     * *Output* - The horizontal value of the Joystick. This will be a value between\n     * -1.0 (full right) and 1.0 (full left). Idle in the center is 0.0.\n     *\n     * @example <caption>Get X value</caption>\n     * var myValueX = myJoystick.x;\n     *\n     * @type {!number}\n     */\n    this.x = 0\n\n    /**\n     * *Output* - The vertical value of the Joystick. This will be a value between\n     * -1.0 (full down) and 1.0 (full up). Idle in the center is 0.0.\n     *\n     * @example <caption>Get Y value</caption>\n     * var myValueY = myJoystick.y;\n     *\n     * @type {!number}\n     */\n    this.y = 0\n  }\n\n  /**\n   * Get Joystick dimensions.\n   *\n   * @protected\n   * @return {Map<string,number|string>} the dimension collection\n   * @property {!(number|string)} x - the x coordinate\n   * @property {!(number|string)} y - the y coordinate\n   * @property {!(number|string)} r - the radius\n   */\n  getDimensions () {\n    return { x: this.position.x, y: this.position.y, r: this.radius }\n  }\n\n  /**\n   * Is the specified touch inside the Joystick.\n   *\n   * This method is called by the framework, so need not be used directly.\n   *\n   * @override\n   * @protected\n   * @param {!TouchEvent} touch - the TouchEvent to test\n   * @return {boolean} - true if the control matches the event\n   */\n  matchesTouch (touch) {\n    const { clientX, clientY } = touch\n    const { x, y, r } = this.getPixelDimensions()\n\n    const dx = (x - clientX)\n    const dy = (y - clientY)\n    return Math.sqrt(dx * dx + dy * dy) <= r\n  }\n\n  /**\n   * A touch tracked by the Joystick has been updated. Updates the\n   * values of `x` and `y` outputs and handles sticky behavior.\n   *\n   * This method is called by the framework, so need not be used directly.\n   *\n   * @override\n   * @protected\n   * @param {?TouchEvent} touch - the TouchEvent to test\n   */\n  setTouch (touch) {\n    super.setTouch(touch)\n    if (touch) {\n      const { x, y, r } = this.getPixelDimensions()\n      this.x = constrain((x - touch.clientX) / r, -1.0, 1.0)\n      this.y = constrain((y - touch.clientY) / r, -1.0, 1.0)\n    } else if (!this.sticky) {\n      this.x = 0.0\n      this.y = 0.0\n    }\n  }\n\n  /**\n   * Draw the Joystick on the canvas.\n   *\n   * This method is called by the framework, so need not be used directly.\n   *\n   * @override\n   * @protected\n   * @param {!CanvasRenderingContext2D} ctx - the 2D drawing context\n   */\n  draw (ctx) {\n    const { x, y, r } = this.getPixelDimensions()\n    const ir = Math.round(r / 3)\n\n    ctx.beginPath()\n    ctx.strokeStyle = (this.touch && this.touchedStyle) || this.style\n    ctx.lineWidth = 5\n    ctx.arc(x, y, ir, 0, Math.PI * 2, true)\n    ctx.stroke()\n\n    ctx.beginPath()\n    ctx.strokeStyle = (this.touch && this.touchedStyle) || this.style\n    ctx.lineWidth = 2\n    ctx.arc(x, y, r, 0, Math.PI * 2, true)\n    ctx.stroke()\n\n    // paint the current touch //\n    ctx.beginPath()\n    ctx.strokeStyle = this.style\n    ctx.arc(x - this.x * r, y - this.y * r, ir, 0, Math.PI * 2, true)\n    ctx.stroke()\n\n    ctx.beginPath()\n    ctx.fillStyle = 'white'\n    ctx.fillText(\n      `${this.name}, x: ${this.x.toFixed(3)}, y: ${this.y.toFixed(3)}`,\n      x - 50, y + r + 15\n    )\n  }\n}\n","import Control from './Control'\nimport { constrain } from '../utils'\n\n/**\n * Slider for uni-dimensional control.\n *\n * Sliders can be oriented either vertically or horizontally by setting\n * the {@link Slider#type} property. The slider is defined by a reference\n * position, length and radius.\n *\n * ## Vertical Slider ##\n * For vertical sliders, the position is the center of the top half-circle.\n *\n * ```javascript\n * // not actually needed, this is the default mode\n * mySlider.type = Slider.VERTICAL;\n * mySlider.position.x = 20;\n * mySlider.position.y = 20;\n * mySlider.length = 60;\n * mySlider.radius = 10;\n * ```\n *\n * ## Horizonal Slider ##\n * For horizontal sliders, the position is the center of the left half-circle.\n *\n * ```javascript\n * mySlider.type = Slider.HORIZONTAL;\n * mySlider.position.x = 20;\n * mySlider.position.y = 20;\n * mySlider.length = 60;\n * mySlider.radius = 10;\n * ```\n */\nexport default class Slider extends Control {\n  /**\n   * Constructor. Create a new Slider and add it to the canvas.\n   *\n   * @override\n   * @param {!string} name - the slider name\n   * @throws {Error} control already exists with specified name\n   */\n  constructor (name) {\n    super(name)\n    /**\n     * The placement of the Slider on the canvas. For a HORIZONTAL Slider,\n     * this is the center of the left half-circle, for a VERTICAL Slider, this\n     * is the center of top half-circle.\n     *\n     * For dimension values, see {@link ControlManager.convertToPixels}.\n     *\n     * @example <caption>Set individually</caption>\n     * mySlider.position.x = 10;\n     * mySlider.position.y = 20;\n     *\n     * @example <caption>Set as an Object literal</caption>\n     * mySlider.position = { x: 10, y: 20 };\n     *\n     * @type {Position}\n     */\n    this.position = { x: 0, y: 0 }\n    /**\n     * The radius of the Slider arcs.\n     *\n     * @example\n     * mySlider.radius = 10;\n     *\n     * @type {number}\n     */\n    this.radius = 10\n    /**\n     * The length of the Slider. This is the distance between the centers\n     * of the two half-circles. It will be measured either vertically or\n     * horizontally based on the type of slider.\n     *\n     * @example\n     * mySlider.length = 60;\n     *\n     * @type {number}\n     */\n    this.length = 30\n    /**\n     * The type of slider. This must be equal to one of two constants, either\n     * `Slider.VERTICAL` or `Slider.HORIZONTAL`. These values are just strings\n     * of value 'Vertical' and 'Horizontal', respectively.\n     *\n     * @example\n     * mySlider.type = Slider.HORIZONTAL;\n     *\n     * @type {string}\n     */\n    this.type = Slider.VERTICAL\n    /**\n     * Should the slider remember its position when it is not being touched.\n     * Normally, this is the behavior you want for something like spinning-weapon\n     * power.\n     *\n     * Defaults to `true`.\n     *\n     * @type {boolean}\n     */\n    this.sticky = true\n    /**\n     * Style to draw.\n     * @type {string}\n     */\n    this.style = 'white'\n    // initial value //\n    this.value = 0\n  }\n\n  /**\n   * Get Slider dimensions.\n   *\n   * @protected\n   * @return {Map<string,number|string>} named dimension collection, in raw form\n   * @property {!(number|string)} x - the x coordinate of origin\n   * @property {!(number|string)} y - the y coordinate of origin\n   * @property {!(number|string)} r - the radius\n   */\n  getDimensions () {\n    return {\n      x: this.position.x,\n      y: this.position.y,\n      r: this.radius,\n      l: this.length\n    }\n  }\n\n  /**\n   * Helper method to return various pixel coordinates useful for both\n   * touch match detection and drawing. Values are in pixels.\n   *\n   * @private\n   * @return {Map<string,number|string>} named extended dimension collection, in pixels\n   * @property {!(number|string)} x - the x coordinate of origin arc\n   * @property {!(number|string)} x1 - left-most x coordinate rectangle\n   * @property {!(number|string)} x2 - right-most x coordinate rectangle\n   * @property {!(number|string)} xa - the x coordinate of the other arc\n   * @property {!(number|string)} y - the y coordinate of origin\n   * @property {!(number|string)} y1 - top-most y coordindate of rectangle\n   * @property {!(number|string)} y1 - bottom-most y coordindate of rectangle\n   * @property {!(number|string)} ya - the y coordinate of the other arc\n   * @property {!(number|string)} r - the radius\n   * @property {!{number|string}} l - the length\n   */\n  getHelperDimensions () {\n    const { x, y, r, l } = this.getPixelDimensions()\n    if (this.type === Slider.HORIZONTAL) {\n      return {\n        x,\n        x1: x,\n        x2: x + l,\n        xa: x + l,\n        y,\n        y1: y - r,\n        y2: y + r,\n        ya: y,\n        r,\n        l\n      }\n    } else {\n      return {\n        x,\n        x1: x - r,\n        x2: x + r,\n        xa: x,\n        y,\n        y1: y,\n        y2: y + l,\n        ya: y + l,\n        r,\n        l\n      }\n    }\n  }\n\n  /**\n   * Is the specified touch inside the Slider.\n   *\n   * This method is called by the framework, so need not be used directly.\n   *\n   * @override\n   * @protected\n   * @param {!TouchEvent} touch - the TouchEvent to test\n   * @return {boolean} - true if the control matches the event\n   */\n  matchesTouch (touch) {\n    const { clientX, clientY } = touch\n    const { x, y, r, x1, y1, x2, y2, xa, ya } = this.getHelperDimensions()\n\n    // check if in the end circles //\n    const dx = (x - clientX)\n    const dy = (y - clientY)\n    if (Math.sqrt(dx * dx + dy * dy) <= r) return true\n    const dxa = (xa - clientX)\n    const dya = (ya - clientY)\n    if (Math.sqrt(dxa * dxa + dya * dya) <= r) return true\n\n    // check if in the rectangle //\n    return (clientX >= x1) && (clientX <= x2) && (clientY >= y1) && (clientY <= y2)\n  }\n\n  /**\n   * A touch tracked by this Slider has been updated. Updates the slider\n   * value.\n   *\n   * This method is called by the framework, so need not be used directly.\n   *\n   * @override\n   * @protected\n   * @param {?TouchEvent} touch - the TouchEvent to test\n   */\n  setTouch (touch) {\n    super.setTouch(touch)\n    if (touch) {\n      const { l, xa, ya } = this.getHelperDimensions()\n      if (this.type === Slider.HORIZONTAL) {\n        this.value = constrain((xa - touch.clientX) / l, 0.0, 1.0)\n      } else {\n        this.value = constrain((ya - touch.clientY) / l, 0.0, 1.0)\n      }\n    } else if (!this.sticky) {\n      this.value = 0\n    }\n  }\n\n  /**\n   * Draw the Slider on the canvas.\n   *\n   * This method is called by the framework, so need not be used directly.\n   *\n   * @protected\n   * @param {!CanvasRenderingContext2D} ctx - the 2D drawing context\n   */\n  draw (ctx) {\n    const { x, y, r, l, x1, y1, x2, y2, xa, ya } = this.getHelperDimensions()\n\n    ctx.beginPath()\n    ctx.strokeStyle = this.style\n    ctx.lineWidth = 2\n    if (this.type === Slider.HORIZONTAL) {\n      ctx.moveTo(x1, y1)\n      ctx.lineTo(x2, y1)\n      ctx.arc(xa, ya, r, Math.PI * 3 / 2, Math.PI / 2, false)\n      ctx.moveTo(x2, y2)\n      ctx.lineTo(x1, y2)\n      ctx.arc(x, y, r, Math.PI / 2, Math.PI * 3 / 2, false)\n    } else {\n      ctx.arc(x, y, r, Math.PI, Math.PI * 2, false)\n      ctx.moveTo(x2, y1)\n      ctx.lineTo(x2, y2)\n      ctx.arc(xa, ya, r, 0, Math.PI, false)\n      ctx.moveTo(x1, y2)\n      ctx.lineTo(x1, y1)\n    }\n    ctx.stroke()\n\n    // paint the current value //\n    ctx.beginPath()\n    if (this.type === Slider.HORIZONTAL) {\n      ctx.arc(xa - (this.value * l), y, r - 4, 0, Math.PI * 2, true)\n    } else {\n      ctx.arc(x, ya - (this.value * l), r - 4, 0, Math.PI * 2, true)\n    }\n    ctx.strokeStyle = this.style\n    ctx.stroke()\n\n    // paint debug text //\n    ctx.beginPath()\n    ctx.fillStyle = 'white'\n    ctx.fillText(\n      `${this.name}, value: ${this.value.toFixed(3)}`,\n      xa - 50, ya + r + 15\n    )\n  }\n}\nSlider.HORIZONTAL = 'Horizontal'\nSlider.VERTICAL = 'Vertical'\n","/**\n * Base interface for connection to robot.\n *\n * Contains shared functionality between the AJAX and WebSocket connection types.\n *\n * Implements a buffered asynchronous connection. External sources should\n * call setRobotData() whenever new data is available. It will be sent to the robot\n * at the fasted rate the connection will allow.\n *\n * @example <caption>Connection States</caption>\n * Connection.CONNECTED = 'Connected'\n * Connection.CONNECTING = 'Connecting'\n * Connection.DISCONNECTED = 'Disconnected'\n * Connection.ERROR = 'Error'\n */\nexport default class Connection {\n  /**\n   * Constructor.\n   *\n   * @abstract\n   * @protected\n   */\n  constructor () {\n    /**\n     * The current state of the connection\n     * @type {string}\n     */\n    this.state = Connection.DISCONNECTED\n    /**\n     * Is connection enabled.\n     * @type {boolean}\n     */\n    this.enabled = false\n    /**\n     * The last error recorded if the state is ERROR\n     * @type {Error}\n     */\n    this.lastError = null\n    /**\n     * The round-trip time for the last packet received\n     * @type {number}\n     */\n    this.pingTimeMs = null\n    /**\n     * StateChange event, raised whenever the connection state changes.\n     *\n     * @emits {StateChangeEvent} the state connection state has changed\n     * @type {function(newState: string, oldState: string)}\n     */\n    this.onstatechange = null\n    /**\n     * ResponseData event, raised when the connection has received new data\n     * from the robot. The data is a raw string as generated by the robot\n     * firmware.\n     *\n     * @emits {ResponseDataEvent} new data received\n     * @type {function(data: string)}\n     */\n    this.onresponsedata = null\n    /**\n     * @private\n     * @type {string}\n     */\n    this.responseData = null\n    /**\n     * @private\n     * @type {string}\n     */\n    this.dataPacket = null\n  }\n\n  /**\n   *  Start connection to the robot.\n   */\n  start () {\n    this.enabled = true\n  }\n\n  /**\n   *  Stop connection to the robot.\n   */\n  stop () {\n    this.enabled = false\n  }\n\n  /**\n   * Update the connection state and notify listeners if the state\n   * has changed.\n   *\n   * @private\n   * @param {string} newState - the new state\n   */\n  setState (newState) {\n    if (newState === this.state) return\n    const oldState = this.state\n    this.state = newState\n\n    // notify listener //\n    if (typeof this.onstatechange === 'function') {\n      this.onstatechange(newState, oldState)\n    }\n  }\n\n  /**\n   * Set the raw data packet to send to the robot. The actual connection\n   * operates asynchronously, so this method should be called as frequently\n   * as new data is available.\n   *\n   * If an object is passed, it will be converted to JSON.\n   *\n   * @protected\n   * @param {object|string} data the data packet to send\n   */\n  setRobotData (data) {\n    this.dataPacket = (typeof data === 'string') ? data : JSON.stringify(data)\n  }\n\n  /**\n   * Get the latest raw data packet received from the robot. This is set\n   * asynchronously by the connection.\n   *\n   * @protected\n   * @return {string} last robot data packet\n   */\n  getResponseData () {\n    return this.responseData\n  }\n\n  /**\n   * Called by connections to set the latest response data and update\n   * any listeners.\n   *\n   * @private\n   * @param {string} data the data packet received\n   */\n  setResponseData (data) {\n    this.responseData = data\n    if (!data) {\n      this.pingTimeMs = null\n    }\n    // notify listener //\n    if (typeof this.onresponsedata === 'function') {\n      this.onresponsedata(data)\n    }\n  }\n}\n// connection status constants //\nConnection.CONNECTED = 'Connected'\nConnection.CONNECTING = 'Connecting'\nConnection.DISCONNECTED = 'Disconnected'\nConnection.ERROR = 'Error'\n","import Connection from './Connection'\nimport { ajaxPut } from '../utils'\n\n/**\n * Robot connection implemented with repetitive AJAX PUTs to the robot\n * REST API. In practice, this method is limited to 10-15Hz, but is a lowest\n * common denominator supported by nearly all devices.\n *\n * This class is used by the framework and is configured based on options set\n * in the user interface. Direct use by your code is generally not needed.\n */\nexport default class AjaxConnection extends Connection {\n  /**\n   * Constructor.\n   *\n   * Create an AJAX connection. This connection will continuously poll the\n   * robot REST interface at `http://hostname/control` to send control packets.\n   *\n   * @override\n   * @param {number} [timeoutMillis=500] connection timeout in milliseconds\n   */\n  constructor (timeoutMillis) {\n    super()\n    /**\n     * Connection timeout in milliseconds\n     * @type {number}\n     */\n    this.timeoutMillis = timeoutMillis || 500\n    /** @private */\n    this.timerId = null\n  }\n\n  /**\n   *  Poll the robot in a continuous loop.\n   *  @private\n   */\n  poll () {\n    const pollStartMs = new Date().getTime()\n    ajaxPut('/control?body=' + this.dataPacket, this.dataPacket, this.timeoutMillis, (err, res) => {\n      // was the loop terminated? //\n      this.lastError = err\n      if (this.state === Connection.DISCONNECTED) {\n        this.setResponseData(null)\n        return\n      }\n\n      // handle response //\n      if (!this.lastError) {\n        if (this.state !== Connection.CONNECTED) {\n          this.setState(Connection.CONNECTED)\n        }\n        this.pingTimeMs = new Date().getTime() - pollStartMs\n        this.setResponseData(res.data)\n      } else {\n        this.setState(Connection.ERROR)\n        this.setResponseData(null)\n      }\n\n      // poll again //\n      const pollMs = (this.state === Connection.ERROR) ? 1000 : 50 // back off if error //\n      this.timerId = setTimeout(this.poll.bind(this), pollMs)\n    })\n  }\n\n  /**\n   *  Start connection to the robot.\n   *  @override\n   */\n  start () {\n    this.setState(Connection.CONNECTING)\n    super.start()\n    this.poll()\n  }\n\n  /**\n   *  Stop connection to the robot.\n   *  @override\n   */\n  stop () {\n    if (this.timerId) clearTimeout(this.timerId)\n    super.stop()\n    this.setState(Connection.DISCONNECTED)\n    this.setResponseData(null)\n  }\n}\n","/* globals WebSocket */\nimport Connection from './Connection'\n\n/**\n * Robot connection implemented with a WebSocket. This connection allows\n * for higher update rates, but it requires a modern phone OS / browser.\n *\n * @class\n */\nexport default class WebSocketConnection extends Connection {\n  /**\n   * Constructor.\n   *\n   * @param {?string} hostName hostname to connect to\n   */\n  constructor (hostName) {\n    super()\n    const { hostname, port } = document.location\n    /** @private */\n    this.hostName = hostName || (port !== 80) ? `${hostname}:${port}` : hostname\n    /** @private */\n    this.socket = null\n    /** @private */\n    this.startTimeMs = null\n  }\n\n  start () {\n    this.setState(Connection.CONNECTING)\n    super.start()\n\n    this.startTimeMs = new Date().getTime()\n    this.socket = new WebSocket(`ws://${this.hostName}/ws`, [ 'arduino' ])\n    this.socket.onopen = () => {\n      this.setState(Connection.CONNECTED)\n    }\n    this.socket.onerror = (err) => {\n      this.lastError = err\n      this.setState(Connection.ERROR)\n      this.setResponseData(null)\n    }\n    this.socket.onmessage = (event) => {\n      // compute update rate //\n      this.pingTimeMs = new Date().getTime() - this.startTimeMs\n\n      this.setResponseData(event.data)\n    }\n    this.socket.onclose = (event) => {\n      if (this.state !== Connection.ERROR) {\n        this.lastError = new Error('Connection lost')\n        this.setState(Connection.ERROR)\n        this.setResponseData(null)\n        this.socket = null\n      }\n    }\n  }\n\n  stop () {\n    if (this.socket) {\n      if (this.socket.readyState === WebSocket.OPEN) {\n        this.socket.close()\n      }\n      this.setResponseData(null)\n      this.socket = null\n    }\n    super.stop()\n    this.setState(Connection.DISCONNECTED)\n  }\n\n  setRobotData (data) {\n    super.setRobotData(data)\n\n    // send an update //\n    if (this.socket && this.state === Connection.CONNECTED) {\n      // verify WebSocket state //\n      if (this.socket.readyState !== WebSocket.OPEN) {\n        this.lastError = new Error(`Invalid socket state: ${\n            (this.socket.readyState === WebSocket.CONNECTING) ? 'CONNECTING'\n          : (this.socket.readyState === WebSocket.CLOSING) ? 'CLOSING'\n          : (this.socket.readyState === WebSocket.CLOSED) ? 'CLOSED'\n          : 'UNKNOWN'\n        }`)\n        this.setState(Connection.ERROR)\n        return\n      }\n      try {\n        this.startTimeMs = new Date().getTime()\n        this.socket.send(this.dataPacket)\n      } catch (err) {\n        this.lastError = err\n        this.setState(Connection.ERROR)\n        this.setResponseData(null)\n      }\n    }\n  }\n}\n","/* eslint-disable no-unused-vars */\nimport { HardwareManager, Motor, Servo, DigitalOutput, DigitalInput } from './hardware'\nimport { TankDrive, ArcadeDrive } from './drive'\nimport { Joystick, Button, Slider, ControlManager } from './controls'\nimport { AjaxConnection, WebSocketConnection, Connection } from './connection'\nimport { ajaxGet } from './utils'\n\n// get HTML elements //\nconst heading = document.getElementById('heading')\nconst statusIcon = document.getElementById('status-box')\nconst statusText = document.getElementById('status-text')\nconst infoBox = document.getElementById('info-box')\nconst errorBox = document.getElementById('error-box')\nconst canvas = document.getElementById('touch-canvas')\n\n// configure the ControlManager HTML5 canvas //\nconst resizeCanvas = () => {\n  canvas.width = window.innerWidth\n  canvas.height = window.innerHeight - heading.clientHeight - 1\n\n  window.scrollTo(0, 0)\n}\nwindow.addEventListener('orientationchange', resizeCanvas)\nwindow.addEventListener('resize', resizeCanvas)\nresizeCanvas()\nControlManager.setCanvas(canvas)\n\n// add an error to error box //\nfunction addError ({ type, message }) {\n  const eline = document.createElement('li')\n  eline.className = type\n  // error type //\n  const tspan = document.createElement('span')\n  tspan.className = 'type'\n  tspan.innerText = type\n  eline.appendChild(tspan)\n  // error message //\n  const mspan = document.createElement('span')\n  mspan.className = 'message'\n  mspan.innerText = message\n  eline.appendChild(mspan)\n  errorBox.appendChild(eline)\n}\n\nfunction clearErrors (type) {\n  const els = type\n    ? errorBox.getElementsByClassName(type)\n    : errorBox.getElementByTagName('ul')\n  for (let i = 0; i < els.length; i++) {\n    els[i].remove()\n  }\n}\n\n// set UI connection state //\nfunction setConnectionState (state) {\n  console.log('Connection state:', state)\n  switch (state) {\n    case Connection.DISCONNECTED:\n    case Connection.CONNECTING:\n      statusIcon.style.backgroundColor = 'yellow'\n      break\n    case Connection.CONNECTED:\n      statusIcon.style.backgroundColor = 'green'\n      break\n    default:\n      statusIcon.style.backgroundColor = 'red'\n      break\n  }\n  statusText.innerText = state\n}\n\nfunction setConnectionInfo (conn) {\n  infoBox.innerText = `Ping: ${\n    (conn.pingTimeMs !== null) ? `${conn.pingTimeMs} ms` : '----'\n  }`\n}\n\n// initialize the application //\nconst getHardwareConfig = new Promise((resolve, reject) =>\n  ajaxGet('./hardware.json', (err, resp) => {\n    if (err) return reject(err)\n    resolve(JSON.parse(resp.data))\n  })\n)\nconst waitForLoad = new Promise((resolve, reject) => {\n  window.addEventListener('load', () => {\n    console.log('Page loaded')\n    resolve()\n  })\n})\n\nconst WEBSOCKET = true\nlet _runLoop = true\nlet _connection = null\nPromise.all([ getHardwareConfig, waitForLoad ])\n  .then(([ config ]) => {\n    // set hardware configuration //\n    HardwareManager.config = config\n\n    if (window.setup) {\n      console.log('Running robot setup...')\n      try {\n        window.setup()\n      } catch (error) {\n        addError({ type: 'SETUP', message: error.message })\n      }\n    }\n    // test hardware config //\n    const hwErrors = HardwareManager.validateConfig()\n    if (hwErrors) {\n      for (let i = 0; i < hwErrors.length; i++) {\n        addError(hwErrors[i])\n      }\n    }\n\n    // establish connection //\n    _connection = WEBSOCKET ? new WebSocketConnection() : new AjaxConnection()\n    _connection.onstatechange = (newState, oldState) => {\n      setConnectionState(newState)\n      if (newState === Connection.ERROR) {\n        console.log(_connection.lastError)\n        addError({ type: 'CONNECTION', message: _connection.lastError.message })\n      } else if (oldState === Connection.ERROR) {\n        clearErrors('CONNECTION')\n      }\n    }\n    _connection.onresponsedata = (data) => {\n      HardwareManager.setInputs(data)\n      setConnectionInfo(_connection)\n    }\n    // initialize UI //\n    setConnectionState(_connection.state)\n    // initialize control data //\n    _connection.setRobotData(getPacket(HardwareManager.getOutputs()))\n    _connection.start()\n\n    // start the UI control loop //\n    ControlManager.start()\n    ControlManager.onupdate = () => {\n      if (!_runLoop) return\n\n      // call the loop() method to update virtual hardware //\n      if (window.loop) {\n        try {\n          window.loop()\n        } catch (error) {\n          addError({ type: 'LOOP', message: error.message })\n        }\n      }\n      const request = getPacket(HardwareManager.getOutputs())\n      // console.log('request', request)\n      _connection.setRobotData(request)\n    }\n  })\n  .catch(err => {\n    addError({ type: 'SCRIPT', message: err.message })\n  })\n\n// FIXME: get the ghetto-packet for legacy firmware //\nfunction getPacket (json) {\n  return `${json.leftMotor}:${json.rightMotor}:${json.weaponMotor}`\n}\n"],"names":["const","let","super","this","staticAccessors","groupName","Connection"],"mappings":"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"}